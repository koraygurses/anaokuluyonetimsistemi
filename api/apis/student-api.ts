/* tslint:disable */
/* eslint-disable */
/**
 * AYS API
 * AYS API Description
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateStudentDto } from '../models';
import { UpdateStudentDto } from '../models';
/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerCreateStudent: async (body: CreateStudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling studentControllerCreateStudent.');
            }
            const localVarPath = `/student/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerDeleteStudent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling studentControllerDeleteStudent.');
            }
            const localVarPath = `/student/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudentByObjectID: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling studentControllerGetStudentByObjectID.');
            }
            const localVarPath = `/student/byobject/{_id}`
                .replace(`{${"_id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentid Parent ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudentByParentID: async (parentid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentid' is not null or undefined
            if (parentid === null || parentid === undefined) {
                throw new RequiredError('parentid', 'Required parameter parentid was null or undefined when calling studentControllerGetStudentByParentID.');
            }
            const localVarPath = `/student/byparent/{parentid}`
                .replace(`{${"parentid"}}`, encodeURIComponent(String(parentid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} student Student ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudentByStudentID: async (student: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'student' is not null or undefined
            if (student === null || student === undefined) {
                throw new RequiredError('student', 'Required parameter student was null or undefined when calling studentControllerGetStudentByStudentID.');
            }
            const localVarPath = `/student/bystudent/{student}`
                .replace(`{${"student"}}`, encodeURIComponent(String(student)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerUpdateStudent: async (body: UpdateStudentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling studentControllerUpdateStudent.');
            }
            const localVarPath = `/student/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerCreateStudent(body: CreateStudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerCreateStudent(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerDeleteStudent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerDeleteStudent(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByObjectID(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerGetStudentByObjectID(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} parentid Parent ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByParentID(parentid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerGetStudentByParentID(parentid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} student Student ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByStudentID(student: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerGetStudentByStudentID(student, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerGetStudents(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerUpdateStudent(body: UpdateStudentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StudentApiAxiosParamCreator(configuration).studentControllerUpdateStudent(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerCreateStudent(body: CreateStudentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StudentApiFp(configuration).studentControllerCreateStudent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerDeleteStudent(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StudentApiFp(configuration).studentControllerDeleteStudent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByObjectID(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StudentApiFp(configuration).studentControllerGetStudentByObjectID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentid Parent ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByParentID(parentid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return StudentApiFp(configuration).studentControllerGetStudentByParentID(parentid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} student Student ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentByStudentID(student: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StudentApiFp(configuration).studentControllerGetStudentByStudentID(student, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudents(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return StudentApiFp(configuration).studentControllerGetStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateStudentDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerUpdateStudent(body: UpdateStudentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StudentApiFp(configuration).studentControllerUpdateStudent(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @param {CreateStudentDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerCreateStudent(body: CreateStudentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return StudentApiFp(this.configuration).studentControllerCreateStudent(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id MongoDB ObjectID String
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerDeleteStudent(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return StudentApiFp(this.configuration).studentControllerDeleteStudent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id MongoDB ObjectID String
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerGetStudentByObjectID(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return StudentApiFp(this.configuration).studentControllerGetStudentByObjectID(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} parentid Parent ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerGetStudentByParentID(parentid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return StudentApiFp(this.configuration).studentControllerGetStudentByParentID(parentid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} student Student ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerGetStudentByStudentID(student: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return StudentApiFp(this.configuration).studentControllerGetStudentByStudentID(student, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerGetStudents(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return StudentApiFp(this.configuration).studentControllerGetStudents(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateStudentDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public async studentControllerUpdateStudent(body: UpdateStudentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return StudentApiFp(this.configuration).studentControllerUpdateStudent(body, options).then((request) => request(this.axios, this.basePath));
    }
}
