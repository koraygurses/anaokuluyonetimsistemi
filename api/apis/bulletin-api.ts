/* tslint:disable */
/* eslint-disable */
/**
 * AYS API
 * AYS API Description
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateBulletinDto } from '../models';
import { UpdateBulletinDto } from '../models';
/**
 * BulletinApi - axios parameter creator
 * @export
 */
export const BulletinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBulletinDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerCreate: async (body: CreateBulletinDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling bulletinControllerCreate.');
            }
            const localVarPath = `/bulletin/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bulletin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Date} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindByDate: async (date: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date', 'Required parameter date was null or undefined when calling bulletinControllerFindByDate.');
            }
            const localVarPath = `/bulletin/findbydate/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} classid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindByFilter: async (classid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classid' is not null or undefined
            if (classid === null || classid === undefined) {
                throw new RequiredError('classid', 'Required parameter classid was null or undefined when calling bulletinControllerFindByFilter.');
            }
            const localVarPath = `/bulletin/filter/{classid}`
                .replace(`{${"classid"}}`, encodeURIComponent(String(classid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindFile: async (filename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename', 'Required parameter filename was null or undefined when calling bulletinControllerFindFile.');
            }
            const localVarPath = `/bulletin/findfile/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bulletinid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindFiles: async (bulletinid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulletinid' is not null or undefined
            if (bulletinid === null || bulletinid === undefined) {
                throw new RequiredError('bulletinid', 'Required parameter bulletinid was null or undefined when calling bulletinControllerFindFiles.');
            }
            const localVarPath = `/bulletin/findfiles/{bulletinid}`
                .replace(`{${"bulletinid"}}`, encodeURIComponent(String(bulletinid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', responseType: 'blob', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling bulletinControllerFindOne.');
            }
            const localVarPath = `/bulletin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling bulletinControllerRemove.');
            }
            const localVarPath = `/bulletin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBulletinDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerUpdate: async (body: UpdateBulletinDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling bulletinControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling bulletinControllerUpdate.');
            }
            const localVarPath = `/bulletin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} bulletinid MongoDB string for Bulletin Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulletinControllerUpload: async (bulletinid: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulletinid' is not null or undefined
            if (bulletinid === null || bulletinid === undefined) {
                throw new RequiredError('bulletinid', 'Required parameter bulletinid was null or undefined when calling bulletinControllerUpload.');
            }
            const localVarPath = `/bulletin/upload/{bulletinid}`
                .replace(`{${"bulletinid"}}`, encodeURIComponent(String(bulletinid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulletinApi - functional programming interface
 * @export
 */
export const BulletinApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBulletinDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerCreate(body: CreateBulletinDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Date} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindByDate(date: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindByDate(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} classid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindByFilter(classid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindByFilter(classid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindFile(filename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindFile(filename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} bulletinid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindFiles(bulletinid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindFiles(bulletinid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateBulletinDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerUpdate(body: UpdateBulletinDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerUpdate(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} bulletinid MongoDB string for Bulletin Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerUpload(bulletinid: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BulletinApiAxiosParamCreator(configuration).bulletinControllerUpload(bulletinid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BulletinApi - factory interface
 * @export
 */
export const BulletinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateBulletinDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerCreate(body: CreateBulletinDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return BulletinApiFp(configuration).bulletinControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindAll(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return BulletinApiFp(configuration).bulletinControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Date} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindByDate(date: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return BulletinApiFp(configuration).bulletinControllerFindByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} classid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindByFilter(classid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return BulletinApiFp(configuration).bulletinControllerFindByFilter(classid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindFile(filename: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BulletinApiFp(configuration).bulletinControllerFindFile(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bulletinid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindFiles(bulletinid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BulletinApiFp(configuration).bulletinControllerFindFiles(bulletinid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return BulletinApiFp(configuration).bulletinControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerRemove(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return BulletinApiFp(configuration).bulletinControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBulletinDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerUpdate(body: UpdateBulletinDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return BulletinApiFp(configuration).bulletinControllerUpdate(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} bulletinid MongoDB string for Bulletin Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulletinControllerUpload(bulletinid: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BulletinApiFp(configuration).bulletinControllerUpload(bulletinid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulletinApi - object-oriented interface
 * @export
 * @class BulletinApi
 * @extends {BaseAPI}
 */
export class BulletinApi extends BaseAPI {
    /**
     * 
     * @param {CreateBulletinDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerCreate(body: CreateBulletinDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return BulletinApiFp(this.configuration).bulletinControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindAll(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Date} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindByDate(date: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindByDate(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} classid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindByFilter(classid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindByFilter(classid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindFile(filename: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindFile(filename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} bulletinid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindFiles(bulletinid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindFiles(bulletinid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return BulletinApiFp(this.configuration).bulletinControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerRemove(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return BulletinApiFp(this.configuration).bulletinControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateBulletinDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerUpdate(body: UpdateBulletinDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return BulletinApiFp(this.configuration).bulletinControllerUpdate(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} bulletinid MongoDB string for Bulletin Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulletinApi
     */
    public async bulletinControllerUpload(bulletinid: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return BulletinApiFp(this.configuration).bulletinControllerUpload(bulletinid, options).then((request) => request(this.axios, this.basePath));
    }
}
