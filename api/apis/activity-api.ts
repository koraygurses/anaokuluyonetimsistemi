/* tslint:disable */
/* eslint-disable */
/**
 * AYS API
 * AYS API Description
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { MultipleAcitivityDto } from '../models';
import { SetActivityStatusDto } from '../models';
import { UpdateActivityDto } from '../models';
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MultipleAcitivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerCreateActivity: async (body: MultipleAcitivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling activityControllerCreateActivity.');
            }
            const localVarPath = `/activity/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerDeleteActivity: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling activityControllerDeleteActivity.');
            }
            const localVarPath = `/activity/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetActivity: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetActivityByObjectID: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling activityControllerGetActivityByObjectID.');
            }
            const localVarPath = `/activity/find/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} classid MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetAllSchedule: async (classid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classid' is not null or undefined
            if (classid === null || classid === undefined) {
                throw new RequiredError('classid', 'Required parameter classid was null or undefined when calling activityControllerGetAllSchedule.');
            }
            const localVarPath = `/activity/all/{classid}`
                .replace(`{${"classid"}}`, encodeURIComponent(String(classid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetDailySchedule: async (date: string, _class: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date', 'Required parameter date was null or undefined when calling activityControllerGetDailySchedule.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class', 'Required parameter _class was null or undefined when calling activityControllerGetDailySchedule.');
            }
            const localVarPath = `/activity/daily/{class}/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetMonthlySchedule: async (date: string, _class: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date', 'Required parameter date was null or undefined when calling activityControllerGetMonthlySchedule.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class', 'Required parameter _class was null or undefined when calling activityControllerGetMonthlySchedule.');
            }
            const localVarPath = `/activity/monthly/{class}/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerGetTriduumSchedule: async (date: string, _class: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date', 'Required parameter date was null or undefined when calling activityControllerGetTriduumSchedule.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class', 'Required parameter _class was null or undefined when calling activityControllerGetTriduumSchedule.');
            }
            const localVarPath = `/activity/triduum/{class}/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetActivityStatusDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerSetActivityStatusByObjectID: async (body: SetActivityStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling activityControllerSetActivityStatusByObjectID.');
            }
            const localVarPath = `/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateActivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerUpdateActivity: async (body: UpdateActivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling activityControllerUpdateActivity.');
            }
            const localVarPath = `/activity/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MultipleAcitivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerCreateActivity(body: MultipleAcitivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerCreateActivity(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerDeleteActivity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerDeleteActivity(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetActivity(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetActivity(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetActivityByObjectID(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetActivityByObjectID(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} classid MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetAllSchedule(classid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetAllSchedule(classid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetDailySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetDailySchedule(date, _class, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetMonthlySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetMonthlySchedule(date, _class, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetTriduumSchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerGetTriduumSchedule(date, _class, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SetActivityStatusDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerSetActivityStatusByObjectID(body: SetActivityStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerSetActivityStatusByObjectID(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateActivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerUpdateActivity(body: UpdateActivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityControllerUpdateActivity(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {MultipleAcitivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerCreateActivity(body: MultipleAcitivityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerCreateActivity(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerDeleteActivity(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ActivityApiFp(configuration).activityControllerDeleteActivity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetActivity(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerGetActivity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id MongoDB ObjectID String
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetActivityByObjectID(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ActivityApiFp(configuration).activityControllerGetActivityByObjectID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} classid MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetAllSchedule(classid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerGetAllSchedule(classid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetDailySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerGetDailySchedule(date, _class, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetMonthlySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerGetMonthlySchedule(date, _class, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date Date String
         * @param {string} _class MongoDB ObjectID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerGetTriduumSchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return ActivityApiFp(configuration).activityControllerGetTriduumSchedule(date, _class, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetActivityStatusDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerSetActivityStatusByObjectID(body: SetActivityStatusDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ActivityApiFp(configuration).activityControllerSetActivityStatusByObjectID(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateActivityDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerUpdateActivity(body: UpdateActivityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ActivityApiFp(configuration).activityControllerUpdateActivity(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @param {MultipleAcitivityDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerCreateActivity(body: MultipleAcitivityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerCreateActivity(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id MongoDB ObjectID String
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerDeleteActivity(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return ActivityApiFp(this.configuration).activityControllerDeleteActivity(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetActivity(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerGetActivity(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id MongoDB ObjectID String
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetActivityByObjectID(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return ActivityApiFp(this.configuration).activityControllerGetActivityByObjectID(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} classid MongoDB ObjectID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetAllSchedule(classid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerGetAllSchedule(classid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} date Date String
     * @param {string} _class MongoDB ObjectID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetDailySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerGetDailySchedule(date, _class, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} date Date String
     * @param {string} _class MongoDB ObjectID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetMonthlySchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerGetMonthlySchedule(date, _class, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} date Date String
     * @param {string} _class MongoDB ObjectID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerGetTriduumSchedule(date: string, _class: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
        return ActivityApiFp(this.configuration).activityControllerGetTriduumSchedule(date, _class, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SetActivityStatusDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerSetActivityStatusByObjectID(body: SetActivityStatusDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return ActivityApiFp(this.configuration).activityControllerSetActivityStatusByObjectID(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateActivityDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public async activityControllerUpdateActivity(body: UpdateActivityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
        return ActivityApiFp(this.configuration).activityControllerUpdateActivity(body, options).then((request) => request(this.axios, this.basePath));
    }
}
